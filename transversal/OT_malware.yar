import "pe"

rule TRITON_ICS_FRAMEWORK {
  meta:
    author = "nicholas.carr @itsreallynick"
    md5 = "0face841f7b2953e7c29c064d6886523"
    description = "TRITON framework recovered during Mandiant ICS incident response"
    source = "https://cloud.google.com/blog/topics/threat-intelligence/attackers-deploy-new-ics-attack-framework-triton"
    score = 60
  strings:
    $python_compiled = ".pyc" nocase ascii wide
    $python_module_01 = "__module__" nocase ascii wide
    $python_module_02 = "<module>" nocase ascii wide
    $python_script_01 = "import Ts" nocase ascii wide
    $python_script_02 = "def ts_" nocase ascii wide  

    $py_cnames_01 = "TS_cnames.py" nocase ascii wide
    $py_cnames_02 = "TRICON" nocase ascii wide
    $py_cnames_03 = "TriStation " nocase ascii wide
    $py_cnames_04 = " chassis " nocase ascii wide  

    $py_tslibs_01 = "GetCpStatus" nocase ascii wide
    $py_tslibs_02 = "ts_" ascii wide
    $py_tslibs_03 = " sequence" nocase ascii wide
    $py_tslibs_04 = /import Ts(Hi|Low|Base)/ nocase ascii wide
    $py_tslibs_05 = /module\s?version/ nocase ascii wide
    $py_tslibs_06 = "bad " nocase ascii wide
    $py_tslibs_07 = "prog_cnt" nocase ascii wide  

    $py_tsbase_01 = "TsBase.py" nocase ascii wide
    $py_tsbase_02 = ".TsBase(" nocase ascii wide 
   
    $py_tshi_01 = "TsHi.py" nocase ascii wide
    $py_tshi_02 = "keystate" nocase ascii wide
    $py_tshi_03 = "GetProjectInfo" nocase ascii wide
    $py_tshi_04 = "GetProgramTable" nocase ascii wide
    $py_tshi_05 = "SafeAppendProgramMod" nocase ascii wide
    $py_tshi_06 = ".TsHi(" ascii nocase wide  

    $py_tslow_01 = "TsLow.py" nocase ascii wide
    $py_tslow_02 = "print_last_error" ascii nocase wide
    $py_tslow_03 = ".TsLow(" ascii nocase wide
    $py_tslow_04 = "tcm_" ascii wide
    $py_tslow_05 = " TCM found" nocase ascii wide  

    $py_crc_01 = "crc.pyc" nocase ascii wide
    $py_crc_02 = "CRC16_MODBUS" ascii wide
    $py_crc_03 = "Kotov Alaxander" nocase ascii wide
    $py_crc_04 = "CRC_CCITT_XMODEM" ascii wide
    $py_crc_05 = "crc16ret" ascii wide
    $py_crc_06 = "CRC16_CCITT_x1D0F" ascii wide
    $py_crc_07 = /CRC16_CCITT[^_]/ ascii wide  

    $py_sh_01 = "sh.pyc" nocase ascii wide  

    $py_keyword_01 = " FAILURE" ascii wide
    $py_keyword_02 = "symbol table" nocase ascii wide  

    $py_TRIDENT_01 = "inject.bin" ascii nocase wide
    $py_TRIDENT_02 = "imain.bin" ascii nocase wide  

  condition:
    2 of ($python_*) and 7 of ($py_*) and filesize < 3MB
}




// detect common properties of the BE2 and BE3 loader
rule BlackEnergy {
  meta:
    author = "CISA"
    source = "https://www.cisa.gov/sites/default/files/file_attach/ICS-ALERT-14-281-01E.yara"
    score = 60
  strings: 
    $hc1 = {68 97 04 81 1D 6A 01}
    $hc2 = {68 A8 06 B0 3B 6A 02}
    $hc3 = {68 14 06 F5 33 6A 01}
    $hc4 = {68 AF 02 91 AB 6A 01}
    $hc5 = {68 8A 86 39 56 6A 02}
    $hc6 = {68 19 2B 90 95 6A 01}
    $hc7 = {(68 | B?) 11 05 90 23}
    $hc8 = {(68 | B?) EB 05 4A 2F}
    $hc9 = {(68 | B?) B7 05 57 2A}
  condition:
    2 of ($hc*)
}

// detect BE3 variants that are not caught by the general BlackEnergy rule
rule BlackEnergy3 {
  meta:
    author = "CISA"
    source = "https://www.cisa.gov/sites/default/files/file_attach/ICS-ALERT-14-281-01E.yara"
    score = 60
  strings: 
    $a1 = "MCSF_Config" ascii
    $a2 = "NTUSER.LOG" ascii
    $a3 = "ldplg" ascii
    $a4 = "unlplg" ascii
    $a5 = "getp" ascii
    $a6 = "getpd" ascii
    $a7 = "CSTR" ascii
    $a8 = "FONTCACHE.DAT" ascii
  condition:
    4 of them
}

// detect both packed and unpacked variants of the BE2 driver
rule BlackEnergy2_Driver {
  meta:
    author = "CISA"
    source = "https://www.cisa.gov/sites/default/files/file_attach/ICS-ALERT-14-281-01E.yara"
    score = 60
  strings:
    $a1 = {7E 4B 54 1A}
    $a2 = {E0 3C 96 A2}
    $a3 = "IofCompleteRequest" ascii
    $b1 = {31 A1 44 BC}
    $b2 = "IoAttachDeviceToDeviceStack" ascii
    $b3 = "KeInsertQueueDpc" ascii
    $c1 = {A3 41 FD 66}
    $c2 = {61 1E 4E F8}
    $c3 = "PsCreateSystemThread" ascii
  condition:
    all of ($a*) and 3 of ($b*, $c*)
}

// detect BE2 variants, typically plugins or loaders containing plugins
rule BlackEnergy2 {
  meta:
    author = "CISA"
    source = "https://www.cisa.gov/sites/default/files/file_attach/ICS-ALERT-14-281-01E.yara"
    score = 60
  strings:
    $ex1 = "DispatchCommand" ascii
    $ex2 = "DispatchEvent" ascii
    $a1 = {68 A1 B0 5C 72}
    $a2 = {68 6B 43 59 4E}
    $a3 = {68 E6 4B 59 4E}
  condition:
    all of ($ex*) and 3 of ($a*)
}



rule blackenergy_and_petya_similarities {
  meta:
    author = "Kaspersky"
    source = "https://securelist.com/from-blackenergy-to-expetr/78937/"
    score = 60
  strings: 
    //shutdown.exe /r /f
    $bytes00 = { 73 00 68 00 75 00 74 00 64 00 6f 00 77 00 6e 00 2e 00 65 00 78 00 65 00 }
   
    //ComSpec
    $bytes01 = { 43 00 6f 00 6d 00 53 00 70 00 65 00 63 00 }
   
    //InitiateSystemShutdown
    $bytes02 = { 49 6e 69 74 69 61 74 65 53 79 73 74 65 6d 53 68 75 74 64 6f 77 6e 45 78 57}
   
    //68A4430110                     push         0100143A4 ;'ntdll.dll' 
    //FF151CD10010                   call         GetModuleHandleA
    //3BC7                           cmp          eax,edi
    //7420                           jz          ...
    $bytes03 = { 68 ?? ?? ?1 ?0 ff 15 ?? ?? ?? ?0 3b c7 74 ?? }
   
    // "/c"
    $bytes04 = { 2f 00 63 00 }
   
              //wcscmp(...
    $hex_string = { b9 ?? ?? ?1 ?0 8d 44 24 ?c 66 8b 10 66 3b 11 75 1e 66
                        85 d2 74 15 66 8b 50 02 66 3b 51 02 75 0f 83 c0 04 83 c1 04 66 85 d2 75
                        de 33 c0 eb 05 1b c0 83 d8 ff 85 c0 0f 84 ?? 0? 00 00 b9 ?? ?? ?1 ?0 8d
                        44 24 ?c 66 8b 10 66 3b 11 75 1e 66 85 d2 74 15 66 8b 50 02 66 3b 51 02
                        75 0f 83 c0 04 83 c1 04 66 85 d2 75 de 33 c0 eb 05 1b c0 83 d8 ff 85 c0
                        0f 84 ?? 0? 00 00 }
   
  condition:  
    ((uint16(0) == 0x5A4D)) and (filesize < 5000000) and 
    (all of them)
  }


rule M_Hunting_PyInstaller_PIEHOP_Module_Strings {
     meta:
          author = "Mandiant"
          date = "2023-04-11"
          description = "Searching for PyInstaller files with a custom Python script/module associated with PIEHOP."
          source = "https://cloud.google.com/blog/topics/threat-intelligence/cosmicenergy-ot-malware-russian-response/"
          score = 60
     strings:
          $lib = "iec104_mssql_lib" ascii

     condition:
          uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and 
          $lib
}


rule M_Hunting_Disrupt_LIGHTWORK_Strings {
     meta:
          author = "Mandiant"
          description = "Searching for strings associated with IEC-104 used in LIGHTWORK."
          date = "2023-04-19"
          source = "https://cloud.google.com/blog/topics/threat-intelligence/cosmicenergy-ot-malware-russian-response/"
          score = 60
     strings:
          $s1 = "Connecting to: %s:%i\n" ascii wide nocase
          $s2 = "Connected!" ascii wide nocase
          $s3 = "Send control command C_SC_NA_1" ascii wide nocase
          $s4 = "Connect failed!" ascii wide nocase
          $s5 = "Send time sync command" ascii wide nocase
          $s6 = "Wait ..." ascii wide nocase
          $s7 = "exit 0" ascii wide nocase
 
     condition:
          filesize < 5MB and
          uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
          all of them
}


/*
  https://github.com/Neo23x0/signature-base/blob/2ccd5f772b3f626a0130dd562f1ae68602dcade0/yara/apt_industroyer.yar
   Yara Rule Set
   Author: Florian Roth
   Date: 2017-06-13
   Identifier: Industroyer
   Reference: https://goo.gl/x81cSy
*/

/* Rule Set ----------------------------------------------------------------- */

rule Industroyer_Malware_1 {
   meta:
      description = "Detects Industroyer related malware"
      license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
      author = "Florian Roth (Nextron Systems)"
      reference = "https://goo.gl/x81cSy"
      date = "2017-06-13"
      hash1 = "ad23c7930dae02de1ea3c6836091b5fb3c62a89bf2bcfb83b4b39ede15904910"
      hash2 = "018eb62e174efdcdb3af011d34b0bf2284ed1a803718fba6edffe5bc0b446b81"
      id = "f5ab571c-03a7-538a-ada1-0930d15af5cf"
      score = 40
   strings:
      $s1 = "haslo.exe" fullword ascii
      $s2 = "SYSTEM\\CurrentControlSet\\Services\\%ls" fullword wide
      $s3 = "SYS_BASCON.COM" fullword wide
      $s4 = "*.pcmt" fullword wide
      $s5 = "*.pcmi" fullword wide

      $x1 = { 00 53 00 65 00 72 00 76 00 69 00 63 00 65 00 73
         00 5C 00 25 00 6C 00 73 00 00 00 49 00 6D 00 61
         00 67 00 65 00 50 00 61 00 74 00 68 00 00 00 43
         00 3A 00 5C 00 00 00 44 00 3A 00 5C 00 00 00 45
         00 3A 00 5C 00 00 00 }
      $x2 = "haslo.dat\x00Crash"
   condition:
      ( uint16(0) == 0x5a4d and filesize < 200KB and 1 of ($x*) or 2 of them )
}

rule Industroyer_Malware_2 {
   meta:
      description = "Detects Industroyer related malware"
      license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
      author = "Florian Roth (Nextron Systems)"
      reference = "https://goo.gl/x81cSy"
      date = "2017-06-13"
      hash1 = "3e3ab9674142dec46ce389e9e759b6484e847f5c1e1fc682fc638fc837c13571"
      hash2 = "37d54e3d5e8b838f366b9c202f75fa264611a12444e62ae759c31a0d041aa6e4"
      hash3 = "ecaf150e087ddff0ec6463c92f7f6cca23cc4fd30fe34c10b3cb7c2a6d135c77"
      hash1 = "6d707e647427f1ff4a7a9420188a8831f433ad8c5325dc8b8cc6fc5e7f1f6f47"
      id = "0561a7bb-3b6c-5caf-9131-04924cee1e0f"
      score = 40
   strings:
      $x1 = "sc create %ls type= own start= auto error= ignore binpath= \"%ls\" displayname= \"%ls\"" fullword wide
      $x2 = "10.15.1.69:3128" fullword wide

      $s1 = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; InfoPath.1)" fullword wide
      $s2 = "/c sc stop %s" fullword wide
      $s3 = "sc start %ls" fullword wide
      $s4 = "93.115.27.57" fullword wide
      $s5 = "5.39.218.152" fullword wide
      $s6 = "tierexe" fullword wide
      $s7 = "comsys" fullword wide
      $s8 = "195.16.88.6" fullword wide
      $s9 = "TieringService" fullword wide

      $a1 = "TEMP\x00\x00DEF" fullword wide
      $a2 = "TEMP\x00\x00DEF-C" fullword wide
      $a3 = "TEMP\x00\x00DEF-WS" fullword wide
      $a4 = "TEMP\x00\x00DEF-EP" fullword wide
      $a5 = "TEMP\x00\x00DC-2-TEMP" fullword wide
      $a6 = "TEMP\x00\x00DC-2" fullword wide
      $a7 = "TEMP\x00\x00CES-McA-TEMP" fullword wide
      $a8 = "TEMP\x00\x00SRV_WSUS" fullword wide
      $a9 = "TEMP\x00\x00SRV_DC-2" fullword wide
      $a10 = "TEMP\x00\x00SCE-WSUS01" fullword wide
   condition:
      ( uint16(0) == 0x5a4d and filesize < 300KB and 1 of ($x*) or 3 of them or 1 of ($a*) ) or ( 5 of them )
}

rule Industroyer_Portscan_3 {
   meta:
      description = "Detects Industroyer related custom port scaner"
      license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
      author = "Florian Roth (Nextron Systems)"
      reference = "https://goo.gl/x81cSy"
      date = "2017-06-13"
      hash1 = "893e4cca7fe58191d2f6722b383b5e8009d3885b5913dcd2e3577e5a763cdb3f"
      id = "f6675466-d469-562b-9fb6-7b72bce8a726"
      score = 40
   strings:
      $s1 = "!ZBfamily" fullword ascii
      $s2 = ":g/outddomo;" fullword ascii
      $s3 = "GHIJKLMNOTST" fullword ascii
      /* Decompressed File */
      $d1 = "Error params Arguments!!!" fullword wide
      $d2 = "^(.+?.exe).*\\s+-ip\\s*=\\s*(.+)\\s+-ports\\s*=\\s*(.+)$" fullword wide
      $d3 = "Exhample:App.exe -ip= 127.0.0.1-100," fullword wide
      $d4 = "Error IP Range %ls - %ls" fullword wide
      $d5 = "Can't closesocket." fullword wide
   condition:
      ( uint16(0) == 0x5a4d and filesize < 500KB and all of ($s*) or 2 of ($d*) )
}

/* weak rule, FPs
rule Industroyer_Portscan_3_Output {
   meta:
      description = "Detects Industroyer related custom port scaner output file"
      license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
      author = "Florian Roth (Nextron Systems)"
      reference = "https://goo.gl/x81cSy"
      date = "2017-06-13"
      id = "4469f056-674c-5a44-84a5-12a65b8586d5"
   strings:
      $s1 = "WSA library load complite." fullword ascii
      $s2 = "Connection refused" fullword ascii
   condition:
      all of them
}
*/

rule Industroyer_Malware_4 {
   meta:
      description = "Detects Industroyer related malware"
      license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
      author = "Florian Roth (Nextron Systems)"
      reference = "https://goo.gl/x81cSy"
      date = "2017-06-13"
      hash1 = "21c1fdd6cfd8ec3ffe3e922f944424b543643dbdab99fa731556f8805b0d5561"
      id = "f197d2a5-eecb-51ed-b991-7643efb3f749"
      score = 40
   strings:
      $s1 = "haslo.dat" fullword wide
      $s2 = "defragsvc" fullword ascii

      /* .dat\x00\x00Crash */
      $a1 = { 00 2E 00 64 00 61 00 74 00 00 00 43 72 61 73 68 00 00 00 }
   condition:
      ( uint16(0) == 0x5a4d and filesize < 200KB and all of ($s*) or $a1 )
}

rule Industroyer_Malware_5 {
   meta:
      description = "Detects Industroyer related malware"
      license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
      author = "Florian Roth (Nextron Systems)"
      reference = "https://goo.gl/x81cSy"
      date = "2017-06-13"
      score = 50
      hash1 = "7907dd95c1d36cf3dc842a1bd804f0db511a0f68f4b3d382c23a3c974a383cad"
      id = "52ce21a0-0c72-585c-a805-c5077a7445af"
   strings:
      $x1 = "D2MultiCommService.exe" fullword ascii
      $x2 = "Crash104.dll" fullword ascii
      $x3 = "iec104.log" fullword ascii
      $x4 = "IEC-104 client: ip=%s; port=%s; ASDU=%u " fullword ascii

      $s1 = "Error while getaddrinfo executing: %d" fullword ascii
      $s2 = "return info-Remote command" fullword ascii
      $s3 = "Error killing process ..." fullword ascii
      $s4 = "stop_comm_service_name" fullword ascii
      $s5 = "*1* Data exchange: Send: %d (%s)" fullword ascii
   condition:
      ( uint16(0) == 0x5a4d and filesize < 400KB and ( 1 of ($x*) or 4 of them ) ) or ( all of them )
}


// source: https://github.com/cado-security/DFIR_Resources_Industroyer2/

rule Linux_Wiper_AWFULSHRED {
  meta:
    description = "Detects AWFULSHRED wiper used against Ukrainian ICS"
    author = "mmuir@cadosecurity.com"
    date = "2022-04-12"
    license = "Apache License 2.0"
    hash = "bcdf0bd8142a4828c61e775686c9892d89893ed0f5093bdc70bde3e48d04ab99"
    score = 60
  strings:
    $isBash = "/bin/bash" ascii

    $a1 = "declare -r" ascii
    $a2 = "bash_history" ascii
    $a3 = "bs=1k if=/dev/urandom of=" ascii
    $a4 = "systemd" ascii
    $a5 = "apache http ssh" ascii
    $a6 = "shred" ascii

    $var1 = "iwljzfkg" ascii
    $var2 = "yrkdrrue" ascii
    $var3 = "agzerlyf" ascii
    $var4 = "rggygzny" ascii
    $var5 = "zubzgnvp" ascii
  condition:
    $isBash and 3 of ($a*) and 4 of ($var*)
}


rule Linux_Worm_ORCSHRED {
  meta:
    description = "Detects ORCSHRED worm used in attacks on Ukrainian ICS"
    author = "mmuir@cadosecurity.com"
    date = "2022-04-12"
    license = "Apache License 2.0"
    hash = "43d07f28b7b699f43abd4f695596c15a90d772bfbd6029c8ee7bc5859c2b0861"
    score = 60
  strings:
    $a = "is_owner" ascii
    $b = "Start most security mode!" ascii
    $c = "check_solaris" ascii
    $d = "wsol.sh" ascii
    $e = "wobf.sh" ascii
    $f = "disown" ascii
    $g = "/var/log/tasks" ascii
  condition:
    4 of them
}

rule Powershell_Downloader_POWERGAP {
  meta:
    description = "Detects POWERGAP downloader used against Ukrainian ICS"
    author = "mmuir@cadosecurity.com"
    date = "2022-04-12"
    license = "Apache License 2.0"
    score = 60
  strings:
    $a = "Start-work" ascii
    $b = "$GpoGuid" ascii
    $c = "$SourceFile" ascii
    $d = "$DestinationFile" ascii
    $e = "$appName" ascii
    $f = "LDAP://ROOTDSE" ascii
    $g = "GPT.INI" ascii
    $h = "Get-WmiObject" ascii
    condition:
        5 of them
}

rule Linux_Wiper_SOLOSHRED {
  meta:
    description = "Detects SOLOSHRED wiper used against Ukrainian ICS"
    author = "mmuir@cadosecurity.com"
    date = "2022-04-12"
    license = "Apache License 2.0"
    hash = "87ca2b130a8ec91d0c9c0366b419a0fce3cb6a935523d900918e634564b88028"
    score = 60
  strings:
    $a = "printenv | grep -i \"ora\"" ascii
    $b = "shred" ascii
    $c = "--no-preserve-root" ascii
    $d = "/dev/dsk" ascii
    $e = "$(ls /)" ascii
  condition:
      all of them
}


// source: https://cloud.google.com/blog/topics/threat-intelligence/industroyer-v2-old-malware-new-tricks

rule MTI_Hunting_INDUSTROYERv2_Bytes {
  meta:
    author = "Mandiant"
    date = "04-09-2022"
    description = "Searching for executables containing bytecode associated with the INDUSTROYER.V2 malware family."
    source = "https://cloud.google.com/blog/topics/threat-intelligence/industroyer-v2-old-malware-new-tricks"
    score = 60
  strings:
    $bytes = {8B [2] 89 [2] 8B 0D [4] 89 [2] 8B 15 [4] 89 [2] A1 [4] 89 [2] 8B 0D [4] 89 [2] 8A 15 [4] 88 [2] 8D [2] 5? 8B [2] E8}
  condition:
    filesize < 3MB and
    uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
    $bytes
} 


rule MTI_Hunting_INDUSTROYERv2_Strings {
  meta:
    author = "Mandiant"
    date = "04-09-2022"
    description = "Searching for executables containing strings associated with the INDUSTROYER.V2 malware family." 
    score = 60
  strings:
    $a1 = "M%X - %02d:%02d:%02d" nocase ascii wide
    $a2 = "%02hu:%02hu:%02hu:%04hu" nocase ascii wide
    $a3 = "%s M%X " nocase ascii wide
    $a4 = "%s: %d: %d" nocase ascii wide
    $a5 = "%s M%X %d (%s)" nocase ascii wide
    $a6 = "%s M%X SGCNT %d" nocase ascii wide
    $a7 = "%s ST%X %d" nocase ascii wide
    $a8 = "Current operation : %s" nocase ascii wide
    $a9 = "Sent=x%X | Received=x%X" nocase ascii wide
    $a10 = "ASDU:%u | OA:%u | IOA:%u | " nocase ascii wide
    $a11 = "Cause: %s (x%X) | Telegram type: %s (x%X" nocase ascii wide
    $b1 = "Length:%u bytes | " nocase ascii wide
    $b2 = "Unknown APDU format !!!" nocase ascii wide
    $b3 = "MSTR ->> SLV" nocase ascii wide
    $b4 = "MSTR <<- SLV" nocase ascii wide
  condition:
    filesize < 3MB and
    uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and
    (1 of ($a*) and 1 of ($b*))
}


// source : https://github.com/MDudek-ICS/TRISIS-TRITON-HATMAN/

/*
 * DESCRIPTION: Yara rules to match the known binary components of the HatMan
 *              malware targeting Triconex safety controllers. Any matching
 *              components should hit using the "hatman" rule in addition to a
 *              more specific "hatman_*" rule.
 * AUTHOR:      DHS/NCCIC/ICS-CERT
 */

/* Globally only look at small files. */

private rule hatman_setstatus : hatman {
  strings:
    $preset = { 80 00 40 3c  00 00 62 80  40 00 80 3c  40 20 03 7c 
            ?? ?? 82 40  04 00 62 80  60 00 80 3c  40 20 03 7c 
            ?? ?? 82 40  ?? ?? 42 38               }
  condition:
    $preset
}

private rule hatman_memcpy : hatman {
  strings:
    $memcpy_be = { 7c a9 03 a6  38 84 ff ff  38 63 ff ff  8c a4 00 01 
            9c a3 00 01  42 00 ff f8  4e 80 00 20        }
    $memcpy_le = { a6 03 a9 7c  ff ff 84 38  ff ff 63 38  01 00 a4 8c
            01 00 a3 9c  f8 ff 00 42  20 00 80 4e        }
  condition:
    $memcpy_be or $memcpy_le
}

private rule hatman_dividers : hatman {
  strings:
    $div1     = { 9a 78 56 00 }
    $div2     = { 34 12 00 00 }
  condition:
    $div1 and $div2
}

private rule hatman_nullsub : hatman {
  strings:
    $nullsub = { ff ff 60 38  02 00 00 44  20 00 80 4e }
  condition:
    $nullsub
}

private rule hatman_origaddr : hatman {
  strings:
    $oaddr_be = { 3c 60 00 03  60 63 96 f4  4e 80 00 20 }
    $oaddr_le = { 03 00 60 3c  f4 96 63 60  20 00 80 4e }
  condition:
    $oaddr_be or $oaddr_le
}

private rule hatman_origcode : hatman {
  strings:
    $ocode_be = { 3c 00 00 03  60 00 a0 b0  7c 09 03 a6  4e 80 04 20 }
    $ocode_le   = { 03 00 00 3c  b0 a0 00 60  a6 03 09 7c  20 04 80 4e }
  condition:
    $ocode_be or $ocode_le
}

private rule hatman_mftmsr : hatman {
  strings:
    $mfmsr_be = { 7c 63 00 a6 }
    $mfmsr_le = { a6 00 63 7c }
    $mtmsr_be = { 7c 63 01 24 }
    $mtmsr_le = { 24 01 63 7c }
  condition:
    ($mfmsr_be and $mtmsr_be) or ($mfmsr_le and $mtmsr_le)
}

private rule hatman_loadoff : hatman {
  strings:
    $loadoff_be = { 80 60 00 04  48 00 ?? ??  70 60 ff ff  28 00 00 00
            40 82 ?? ??  28 03 00 00  41 82 ?? ??        }
    $loadoff_le = { 04 00 60 80  ?? ?? 00 48  ff ff 60 70  00 00 00 28 
            ?? ?? 82 40  00 00 03 28  ?? ?? 82 41        }
  condition:
    $loadoff_be or $loadoff_le
}

private rule hatman_injector_int : hatman {
  condition:
    hatman_memcpy and hatman_origaddr and hatman_loadoff
}

private rule hatman_payload_int : hatman {
  condition:
    hatman_memcpy and hatman_origcode and hatman_mftmsr
}

/* Actual public rules to match using the private rules. */

rule hatman_compiled_python : hatman {
  meta:
    score = 60
  condition:
    hatman_nullsub and hatman_setstatus and hatman_dividers
}

rule hatman_injector : hatman {
  meta:
    score = 60
  condition:
    hatman_injector_int and not hatman_payload_int
}

rule hatman_payload : hatman {
  meta:
    score = 60
  condition:
    hatman_payload_int and not hatman_injector_int
}

rule hatman_combined : hatman {
  meta:
    score = 60
  condition:
    hatman_injector_int and hatman_payload_int and hatman_dividers
}

rule hatman : hatman {
  meta:
    author = "DHS/NCCIC/ICS-CERT"
    description = "Matches the known samples of the HatMan malware."
    score = 60
  condition:
    hatman_compiled_python or hatman_injector or hatman_payload
      or hatman_combined
}

// source: https://github.com/Neo23x0/signature-base/blob/2ccd5f772b3f626a0130dd562f1ae68602dcade0/yara/apt_blackenergy.yar

/*
  Yara Rule Set
  Author: Florian Roth
  Date: 2015-02-19
  Identifier: BlackEnergy Malware
*/

rule BlackEnergy_BE_2 {
   meta:
      description = "Detects BlackEnergy 2 Malware"
      license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
      author = "Florian Roth (Nextron Systems)"
      reference = "http://goo.gl/DThzLz"
      date = "2015/02/19"
      hash = "983cfcf3aaaeff1ad82eb70f77088ad6ccedee77"
      id = "c93991b9-77e8-5a73-80ef-e21df770c3a5"
   strings:
      $s0 = "<description> Windows system utility service  </description>" fullword ascii
      $s1 = "WindowsSysUtility - Unicode" fullword wide
      $s2 = "msiexec.exe" fullword wide
      $s3 = "WinHelpW" fullword ascii
      $s4 = "ReadProcessMemory" fullword ascii
   condition:
      uint16(0) == 0x5a4d and filesize < 250KB and all of ($s*)
}

/*
  Yara Rule Set
  Author: Florian Roth
  Date: 2016-01-03
  Identifier: BlackEnergy Malware
*/

rule BlackEnergy_VBS_Agent {
  meta:
    description = "Detects VBS Agent from BlackEnergy Report - file Dropbearrun.vbs"
    license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
    author = "Florian Roth (Nextron Systems)"
    reference = "http://feedproxy.google.com/~r/eset/blog/~3/BXJbnGSvEFc/"
    date = "2016-01-03"
    hash = "b90f268b5e7f70af1687d9825c09df15908ad3a6978b328dc88f96143a64af0f"
    id = "0876f752-d476-5706-918e-edfda9bd7928"
  strings:
    $s0 = "WshShell.Run \"dropbear.exe -r rsa -d dss -a -p 6789\", 0, false" fullword ascii
    $s1 = "WshShell.CurrentDirectory = \"C:\\WINDOWS\\TEMP\\Dropbear\\\"" fullword ascii
    $s2 = "Set WshShell = CreateObject(\"WScript.Shell\")" fullword ascii /* Goodware String - occured 1 times */
  condition:
    filesize < 1KB and 2 of them
}

rule DropBear_SSH_Server {
  meta:
    description = "Detects DropBear SSH Server (not a threat but used to maintain access)"
    license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
    author = "Florian Roth (Nextron Systems)"
    reference = "http://feedproxy.google.com/~r/eset/blog/~3/BXJbnGSvEFc/"
    date = "2016-01-03"
    score = 50
    hash = "0969daac4adc84ab7b50d4f9ffb16c4e1a07c6dbfc968bd6649497c794a161cd"
    id = "22595d8b-b7ea-570e-ad17-d5bcec613abf"
  strings:
    $s1 = "Dropbear server v%s https://matt.ucc.asn.au/dropbear/dropbear.html" fullword ascii
    $s2 = "Badly formatted command= authorized_keys option" fullword ascii
    $s3 = "This Dropbear program does not support '%s' %s algorithm" fullword ascii
    $s4 = "/etc/dropbear/dropbear_dss_host_key" fullword ascii
    $s5 = "/etc/dropbear/dropbear_rsa_host_key" fullword ascii
  condition:
    uint16(0) == 0x5a4d and filesize < 1000KB and 2 of them
}

rule BlackEnergy_BackdoorPass_DropBear_SSH {
  meta:
    description = "Detects the password of the backdoored DropBear SSH Server - BlackEnergy"
    license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
    author = "Florian Roth (Nextron Systems)"
    reference = "http://feedproxy.google.com/~r/eset/blog/~3/BXJbnGSvEFc/"
    date = "2016-01-03"
    hash = "0969daac4adc84ab7b50d4f9ffb16c4e1a07c6dbfc968bd6649497c794a161cd"
    id = "60db00dd-72b3-5a28-90de-2a397b1e007b"
  strings:
    $s1 = "passDs5Bu9Te7" fullword ascii
  condition:
    uint16(0) == 0x5a4d and $s1
}

/* Super Rules ------------------------------------------------------------- */

rule BlackEnergy_KillDisk_1 {
  meta:
    description = "Detects KillDisk malware from BlackEnergy"
    license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
    author = "Florian Roth (Nextron Systems)"
    reference = "http://feedproxy.google.com/~r/eset/blog/~3/BXJbnGSvEFc/"
    date = "2016-01-03"
    score = 80
    super_rule = 1
    hash1 = "11b7b8a7965b52ebb213b023b6772dd2c76c66893fc96a18a9a33c8cf125af80"
    hash2 = "5d2b1abc7c35de73375dd54a4ec5f0b060ca80a1831dac46ad411b4fe4eac4c6"
    hash3 = "c7536ab90621311b526aefd56003ef8e1166168f038307ae960346ce8f75203d"
    hash4 = "f52869474834be5a6b5df7f8f0c46cbc7e9b22fa5cb30bee0f363ec6eb056b95"
    id = "304e7aa3-48d3-5015-aaf1-6b1df2441b75"
  strings:
    $s0 = "system32\\cmd.exe" fullword ascii
    $s1 = "system32\\icacls.exe" fullword wide
    $s2 = "/c del /F /S /Q %c:\\*.*" fullword ascii
    $s3 = "shutdown /r /t %d" fullword ascii
    $s4 = "/C /Q /grant " fullword wide
    $s5 = "%08X.tmp" fullword ascii
    $s6 = "/c format %c: /Y /X /FS:NTFS" fullword ascii
    $s7 = "/c format %c: /Y /Q" fullword ascii
    $s8 = "taskhost.exe" fullword wide /* Goodware String - occured 1 times */
    $s9 = "shutdown.exe" fullword wide /* Goodware String - occured 1 times */
  condition:
    uint16(0) == 0x5a4d and filesize < 500KB and 8 of them
}

rule BlackEnergy_KillDisk_2 {
  meta:
    description = "Detects KillDisk malware from BlackEnergy"
    license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
    author = "Florian Roth (Nextron Systems)"
    reference = "http://feedproxy.google.com/~r/eset/blog/~3/BXJbnGSvEFc/"
    date = "2016-01-03"
    modified = "2023-01-06"
    score = 80
    super_rule = 1
    hash1 = "11b7b8a7965b52ebb213b023b6772dd2c76c66893fc96a18a9a33c8cf125af80"
    hash2 = "5d2b1abc7c35de73375dd54a4ec5f0b060ca80a1831dac46ad411b4fe4eac4c6"
    hash3 = "f52869474834be5a6b5df7f8f0c46cbc7e9b22fa5cb30bee0f363ec6eb056b95"
    id = "f0304e87-a278-5963-9af0-935c088c00ec"
  strings:
    $s0 = "%c:\\~tmp%08X.tmp" fullword ascii
    $s1 = "%s%08X.tmp" fullword ascii
    $s2 = ".exe.sys.drv.doc.docx.xls.xlsx.mdb.ppt.pptx.xml.jpg.jpeg.ini.inf.ttf" wide
    $s3 = "%ls_%ls_%ls_%d.~tmp" fullword wide
  condition:
    uint16(0) == 0x5a4d and filesize < 500KB and 3 of them
}

rule BlackEnergy_Driver_USBMDM {
  meta:
    description = "Black Energy Driver"
    license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
    author = "Florian Roth (Nextron Systems)"
    reference = "http://www.welivesecurity.com/2016/01/03/blackenergy-sshbeardoor-details-2015-attacks-ukrainian-news-media-electric-industry/"
    date = "2016-01-04"
    super_rule = 1
    hash1 = "7874a10e551377d50264da5906dc07ec31b173dee18867f88ea556ad70d8f094"
    hash2 = "b73777469f939c331cbc1c9ad703f973d55851f3ad09282ab5b3546befa5b54a"
    hash3 = "edb16d3ccd50fc8f0f77d0875bf50a629fa38e5ba1b8eeefd54468df97eba281"
    hash4 = "ac13b819379855af80ea3499e7fb645f1c96a4a6709792613917df4276c583fc"
    hash5 = "7a393b3eadfc8938cbecf84ca630e56e37d8b3d23e084a12ea5a7955642db291"
    hash6 = "405013e66b6f137f915738e5623228f36c74e362873310c5f2634ca2fda6fbc5"
    hash7 = "244dd8018177ea5a92c70a7be94334fa457c1aab8a1c1ea51580d7da500c3ad5"
    hash8 = "edcd1722fdc2c924382903b7e4580f9b77603110e497393c9947d45d311234bf"
    id = "d5e8faf0-38cb-5193-b859-83ea09278011"
  strings:
    $s1 = "USB MDM Driver" fullword wide
    $s2 = "KdDebuggerNotPresent" fullword ascii /* Goodware String - occured 50 times */
    $s3 = "KdDebuggerEnabled" fullword ascii /* Goodware String - occured 69 times */
  condition:
    uint16(0) == 0x5a4d and filesize < 180KB and all of them
}

rule BlackEnergy_Driver_AMDIDE {
  meta:
    description = "Black Energy Malware"
    license = "Detection Rule License 1.1 https://github.com/Neo23x0/signature-base/blob/master/LICENSE"
    author = "Florian Roth (Nextron Systems)"
    reference = "http://www.welivesecurity.com/2016/01/03/blackenergy-sshbeardoor-details-2015-attacks-ukrainian-news-media-electric-industry/"
    date = "2016-01-04"
    super_rule = 1
    hash1 = "32d3121135a835c3347b553b70f3c4c68eef711af02c161f007a9fbaffe7e614"
    hash2 = "3432db9cb1fb9daa2f2ac554a0a006be96040d2a7776a072a8db051d064a8be2"
    hash3 = "90ba78b6710462c2d97815e8745679942b3b296135490f0095bdc0cd97a34d9c"
    hash4 = "97be6b2cec90f655ef11ed9feef5b9ef057fd8db7dd11712ddb3702ed7c7bda1"
    hash5 = "5111de45210751c8e40441f16760bf59856ba798ba99e3c9532a104752bf7bcc"
    hash6 = "cbc4b0aaa30b967a6e29df452c5d7c2a16577cede54d6d705ca1f095bd6d4988"
    hash7 = "1ce0dfe1a6663756a32c69f7494ad082d293d32fe656d7908fb445283ab5fa68"
    id = "e5b57c33-87f7-5411-995c-384e0afa0348"
  strings:
    $s1 = " AMD IDE driver" fullword wide
    $s2 = "SessionEnv" fullword wide
    $s3 = "\\DosDevices\\{C9059FFF-1C49-4445-83E8-" wide
    $s4 = "\\Device\\{C9059FFF-1C49-4445-83E8-" wide
  condition:
    uint16(0) == 0x5a4d and filesize < 150KB and all of them
}


// source: https://cloud.google.com/blog/topics/threat-intelligence/incontroller-state-sponsored-ics-tool

rule MTI_Hunting_AsRockDriver_Exploit_PDB {
  meta:
    author = "Mandiant"
    date = "03-23-2022"
    description = "Searching for executables containing strings associated with AsRock driver Exploit."
    score = 40
  strings:
    $dos_stub = "This program cannot be run in DOS mode"

    $pdb_bad = "dev projects\\SignSploit1\\x64\\Release\\AsrDrv_exploit.pdb"

    $pdb_good = "c:\\asrock\\work\\asrocksdk_v0.0.69\\asrrw\\src\\driver\\src\\objfre_win7_amd64\\amd64\\AsrDrv103.pdb"
  condition:
    all of them and (@pdb_bad < @dos_stub[2]) and (#dos_stub == 2) and (@pdb_good > @dos_stub[2])

}



rule MTI_Hunting_AsRockDriver_Exploit_Generic {
  meta:
    author = "Mandiant"
    date = "03-23-2022"
    description = "Searching for executables containing strings associated with AsRock driver Exploit."
    score = 40
  strings:
    $dos_stub = "This program cannot be run in DOS mode"

    $pdb_good = "c:\\asrock\\work\\asrocksdk_v0.0.69\\asrrw\\src\\driver\\src\\objfre_win7_amd64\\amd64\\AsrDrv103.pdb"
  condition:
    all of them and (#dos_stub == 2) and (@pdb_good > @dos_stub[2])

}


// source: https://yaraify.abuse.ch/yarahub/rule/EXE_ICS_Indusroyer2_April2024/


rule EXE_ICS_Indusroyer2_April2024 {
  meta:
    Description = "Detects Industroyer2 ICS malware targeting IEC-104 protocol"
    author = "Yashraj Solanki - Cyber Threat Intelligence Analyst at Bridewell"
    score = 60
    Reference = "https://sectrio.com/blog/analysis-of-ot-cyberattacks-and-malwares/"
    File_Hash = "d69665f56ddef7ad4e71971f06432e59f1510a7194386e5f0e8926aea7b88e00"
    date = "2024-04-09"
    yarahub_author_twitter = "@RustyNoob619"
    yarahub_reference_md5 = "7c05da2e4612fca213430b6c93e76b06"
    yarahub_uuid = "f35815fe-648c-435a-9614-3a4773fe6d32"
    yarahub_license = "CC0 1.0"
    yarahub_rule_matching_tlp = "TLP:WHITE"
    yarahub_rule_sharing_tlp = "TLP:WHITE"
    malpedia_family = "win.industroyer2"
      
  strings:
    //         --------------------IEC-104 Config--------------------
    $config1 = {00 [2-5] 00 2e 00 [2-5] 00 2e 00 [2-5] 00 2e [2-5] 00  // Target IP Address, 10.82.40.105
               20 00 32 00 34 00 30 00 34 00 20 00                    //  Target Port, 2404
               ?? 00 20 00                                           //   Common Address of ASDU, set to default which is 3
               (30 | 31) 00 20 00                                   //    Operational Mode, Boolean value set to 0 thereby skipping IOA ranges
               31 00 20 00                                         //     Extended Config to use 9 Extra Tokens 
               31 00 20 00}                                       //      Boolean Flag set to 1 due to Extended Config Usage  
                             
    //         ---Extended Config---
    $config2 = {2e 00 65 00 78 00 65                            // Target Executable, checking for a .exe file extension 
               00 20 00 31 00 20 00                            //  Rename Executable Flag, set to 1
               22 00 (43 | 44 | 45 | 46) 00 3a 00 5c 00       //   Target Executable Folder Location, set to D Drive
               }

    //         --Extended Config cont--
    $config3 = {22 00 20 00 [1-2] 00                       // Interaction Delay Sleep Time, set to 0
                20 00 [1-2] 00 20 00                      //  Sleep Time, set to 1 second
                30 00 20 00                              //   Special Priority set to 0
                30 00 20 00                             //    Special Sleep Time set to 0
                31 00 20 00                            //     Boolean Flag set to True
                (30 | 31) 00 20 00                    //      Default IO State set to 0
                (30 | 31) 00 20 00                   //       Inverted IO State set to 0
                (38 | 31 00 36 |34 00 34) 00 20 00} //        IO Count set to 44
    
    $cmd1 = "Length:%u bytes" 
    $cmd2 = "Sent=x%X"
    $cmd3 = "Received=x%X"
    $cmd4 = "ASDU:%u"
    $cmd5 = "OA:%u"
    $cmd6 = "IOA:%u"
    $cmd7 = "Cause: %s (x%X)"
    $cmd8 = "Telegram type: %s (x%X)"

    $indicator1 = "10.82.40.105" wide fullword
    $indicator2 = "2404" wide fullword
    $indicator3 = "PService_PPD.exe" wide fullword
    $indicator4 = "PServiceControl.exe" fullword
    $indicator5 = "\"D:\\OIK\\DevCounter\"" wide fullword

  condition:
    (pe.imphash() == "2cf6ff919d8af9170b36d01b351744f3"
    
    or (pe.imports("KERNEL32.dll","CreateToolhelp32Snapshot")
    and pe.imports("KERNEL32.dll","Process32First")
    and pe.imports("KERNEL32.dll","Process32Next")
    and pe.imports("KERNEL32.dll","InterlockedCompareExchange")
    and pe.imports("KERNEL32.dll","SetWaitableTimer")
    and pe.imports("WS2_32.dll","htons")
    and pe.imports("WS2_32.dll","ioctlsocket")
    and pe.imports("SHELL32.dll","CommandLineToArgvW")
    and pe.imports("OLEAUT32.dll","VarDateFromStr")
    and pe.imports("OLEAUT32.dll","VariantTimeToSystemTime")
    and pe.imports("SHLWAPI.dll","StrToIntA")
    and pe.imports("SHLWAPI.dll","wnsprintfW")
    and pe.imports("SHLWAPI.dll","wvnsprintfA")))

    and 3 of ($cmd*)
    and (all of ($config*)
    or  2 of ($indicator*))

    and filesize < 100KB
 }

