private rule win_remcos_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2023-12-06"
        version = "1"
        description = "Detects win.remcos."
        info = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.6.0"
        signator_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.remcos"
        malpedia_rule_date = "20231130"
        malpedia_hash = "fc8a0e9f343f6d6ded9e7df1a64dac0cc68d7351"
        malpedia_version = "20230808"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 7410 6a00 ff35???????? ff15???????? }
            // n = 4, score = 2000
            //   7410                 | je                  0x12
            //   6a00                 | push                0
            //   ff35????????         |
            //   ff15????????         |

        $sequence_1 = { 50 ff15???????? 8d45f0 33f6 }
            // n = 4, score = 2000
            //   50                   | push                eax
            //   ff15????????         |
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   33f6                 | xor                 esi, esi

        $sequence_2 = { 6a09 ff35???????? ff15???????? ff35???????? ff15???????? }
            // n = 5, score = 2000
            //   6a09                 | push                9
            //   ff35????????         |
            //   ff15????????         |
            //   ff35????????         |
            //   ff15????????         |

        $sequence_3 = { 8d45f8 50 ff15???????? ff7508 }
            // n = 4, score = 2000
            //   8d45f8               | lea                 eax, [ebp - 8]
            //   50                   | push                eax
            //   ff15????????         |
            //   ff7508               | push                dword ptr [ebp + 8]

        $sequence_4 = { 7508 ff15???????? 33c0 5f }
            // n = 4, score = 2000
            //   7508                 | jne                 0xa
            //   ff15????????         |
            //   33c0                 | xor                 eax, eax
            //   5f                   | pop                 edi

        $sequence_5 = { 6a09 ff35???????? ff15???????? ff35???????? }
            // n = 4, score = 2000
            //   6a09                 | push                9
            //   ff35????????         |
            //   ff15????????         |
            //   ff35????????         |

        $sequence_6 = { ff15???????? 50 ff15???????? 8d45f0 33f6 }
            // n = 5, score = 2000
            //   ff15????????         |
            //   50                   | push                eax
            //   ff15????????         |
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   33f6                 | xor                 esi, esi

        $sequence_7 = { 50 6a28 ff15???????? 50 ff15???????? 8d45f0 33f6 }
            // n = 7, score = 2000
            //   50                   | push                eax
            //   6a28                 | push                0x28
            //   ff15????????         |
            //   50                   | push                eax
            //   ff15????????         |
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   33f6                 | xor                 esi, esi

        $sequence_8 = { 51 51 8d45f8 c745f808000000 50 ff15???????? ff15???????? }
            // n = 7, score = 2000
            //   51                   | push                ecx
            //   51                   | push                ecx
            //   8d45f8               | lea                 eax, [ebp - 8]
            //   c745f808000000       | mov                 dword ptr [ebp - 8], 8
            //   50                   | push                eax
            //   ff15????????         |
            //   ff15????????         |

        $sequence_9 = { 85c0 7410 6a00 ff35???????? ff15???????? }
            // n = 5, score = 2000
            //   85c0                 | test                eax, eax
            //   7410                 | je                  0x12
            //   6a00                 | push                0
            //   ff35????????         |
            //   ff15????????         |

    condition:
        7 of them and filesize < 1054720
}

private rule win_remcos_w0 {
	meta:
		author = "Matthew @ Embee_Research"
		created = "2023/08/27"
		description = "Detects strings present in remcos rat Samples."
		sha_256 = "ec901217558e77f2f449031a6a1190b1e99b30fa1bb8d8dabc3a99bc69833784"
		source = "https://github.com/embee-research/Yara-detection-rules/blob/main/Rules/win_remcos_rat_unpacked.yar"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.remcos"
        malpedia_rule_date = "20230906"
        malpedia_hash = ""
        malpedia_version = "20230906"
        malpedia_sharing = "TLP:WHITE"

	strings:
		$r0 = " ______                              " ascii
		$r1 = "(_____ \\                             " ascii
		$r2 = " _____) )_____ ____   ____ ___   ___ " ascii
		$r3 = "|  __  /| ___ |    \\ / ___) _ \\ /___)" ascii
		$r4 = "| |  \\ \\| ____| | | ( (__| |_| |___ |" ascii
		$r5 = "|_|   |_|_____)_|_|_|\\____)___/(___/ " ascii

		$s1 = "Watchdog module activated" ascii
		$s2 = "Remcos restarted by watchdog!" ascii
		$s3 = " BreakingSecurity.net" ascii

	condition:
		//uint16(0) == 0x5a4d
		//and
		(
			(all of ($r*)) or (all of ($s*))
		)




}


private rule Remcos
 {
    meta:
        author = "kevoreilly"
        description = "Remcos Payload"
        cape_type = "Remcos Payload"
    strings:
        $name  = "Remcos" nocase
        $time   = "%02i:%02i:%02i:%03i"
        $crypto1 = {81 E1 FF 00 00 80 79 ?? 4? 81 C9 00 FF FF FF 4? 8A ?4 8?}
        $crypto2 = {0F B6 [1-7] 8B 45 08 [0-2] 8D 34 07 8B 01 03 C2 8B CB 99 F7 F9 8A 84 95 ?? ?? FF FF 30 06 47 3B 7D 0C 72}
    condition:
        uint16(0) == 0x5A4D and ($name) and ($time) and any of ($crypto*)
}

private rule Windows_Trojan_Remcos_b296e965 {
    meta:
        author = "Elastic Security"
        id = "b296e965-a99e-4446-b969-ba233a2a8af4"
        fingerprint = "a5267bc2dee28a3ef58beeb7e4a151699e3e561c16ce0ab9eb27de33c122664d"
        creation_date = "2021-06-10"
        last_modified = "2021-08-23"
        threat_name = "Windows.Trojan.Remcos"
        reference = "https://www.elastic.co/security-labs/exploring-the-ref2731-intrusion-set"
        reference_sample = "0ebeffa44bd1c3603e30688ace84ea638fbcf485ca55ddcfd6fbe90609d4f3ed"
        severity = 100
        arch_context = "x86"
        scan_context = "file, memory"
        license = "Elastic License v2"
        os = "windows"
    strings:
        $a1 = "Remcos restarted by watchdog!" ascii fullword
        $a2 = "Mutex_RemWatchdog" ascii fullword
        $a3 = "%02i:%02i:%02i:%03i"
        $a4 = "* Remcos v" ascii fullword
    condition:
        2 of them
}

private rule Windows_Trojan_Remcos_7591e9f1 {
    meta:
        author = "Elastic Security"
        id = "7591e9f1-452d-4731-9bec-545fb0272c80"
        fingerprint = "9436c314f89a09900a9b3c2fd9bab4a0423912427cf47b71edce5eba31132449"
        creation_date = "2023-06-23"
        last_modified = "2023-07-10"
        threat_name = "Windows.Trojan.Remcos"
        reference = "https://www.elastic.co/security-labs/exploring-the-ref2731-intrusion-set"
        reference_sample = "4e6e5ecd1cf9c88d536c894d74320c77967fe08c75066098082bf237283842fa"
        severity = 100
        arch_context = "x86"
        scan_context = "file, memory"
        license = "Elastic License v2"
        os = "windows"
    strings:
        $a1 = "ServRem" ascii fullword
        $a2 = "Screenshots" ascii fullword
        $a3 = "MicRecords" ascii fullword
        $a4 = "remcos.exe" wide nocase fullword
        $a5 = "Remcos" wide fullword
        $a6 = "logs.dat" wide fullword
    condition:
        3 of them
}


private rule malware_Remcos_strings {
          meta:
            description = "detect Remcos in memory"
            author = "JPCERT/CC Incident Response Group"
            rule_usage = "memory scan"
            hash1 = "7d5efb7e8b8947e5fe1fa12843a2faa0ebdfd7137582e5925a0b9c6a9350b0a5"

          strings:
            $remcos = "Remcos" ascii fullword
            $url1 = "Breaking-Security.Net" ascii fullword
            $url2 = "BreakingSecurity.Net" ascii fullword
            $resource = "SETTINGS" ascii wide fullword

          condition:
            1 of ($url*) and $remcos and $resource
}

private rule MAL_Remcos_strings {
    meta:
        description = "Matches strings found in Remcos RAT samples."
        last_modified = "2024-03-20"
        author = "@petermstewart"
        DaysofYara = "80/100"
        sha256 = "b3d7fad59a0ae75ffef9e05f47fc381b4adb716c498106482492e56c1b4370a7"
        sha256 = "9046b2e6ce92647474048c30439ab21ee69a46f6067dbaff67de729644120fad"

    strings:
        $a = "Remcos_Mutex_Inj"
        $b1 = "Uploading file to C&C: "
        $b2 = "Unable to delete: "
        $b3 = "Unable to rename file!"
        $b4 = "Browsing directory: "
        $b5 = "Offline Keylogger Started"
        $b6 = "Online Keylogger Started"
        $b7 = "[Chrome StoredLogins found, cleared!]"
        $b8 = "[Firefox StoredLogins cleared!]"
        $b9 = "Cleared all browser cookies, logins and passwords."
        $b10 = "[Following text has been pasted from clipboard:]"
        $b11 = "[End of clipboard text]"
        $b12 = "OpenCamera"
        $b13 = "CloseCamera"

    condition:
        uint16(0) == 0x5a4d and
        $a and
        10 of ($b*)
}


private rule PWS_BAT_Remcos_AA_MTB {
	meta:
		description = "PWS:BAT/Remcos.AA!MTB,SIGNATURE_TYPE_PEHSTR_EXT,0a 00 0a 00 0a 00 00 01 00 "

	strings :
		$a_01_0 = {67 65 74 5f 53 70 6c 61 73 68 53 63 72 65 65 6e 31 } //01 00  get_SplashScreen1
		$a_01_1 = {61 64 64 5f 4d 6f 75 73 65 44 6f 75 62 6c 65 43 6c 69 63 6b } //01 00  add_MouseDoubleClick
		$a_01_2 = {4e 6f 74 69 66 79 49 63 6f 6e 31 5f 4d 6f 75 73 65 43 6c 69 63 6b } //01 00  NotifyIcon1_MouseClick
		$a_01_3 = {73 65 74 5f 43 68 65 63 6b 4f 6e 43 6c 69 63 6b } //01 00  set_CheckOnClick
		$a_01_4 = {67 65 74 5f 41 63 63 65 73 73 54 6f 54 68 65 4f 66 66 69 63 69 61 6c 57 65 62 73 69 74 65 4f 6e 47 69 74 48 75 62 54 6f 6f 6c 53 74 72 69 70 4d 65 6e 75 49 74 65 6d } //01 00  get_AccessToTheOfficialWebsiteOnGitHubToolStripMenuItem
		$a_01_5 = {41 75 74 6f 53 61 76 65 53 65 74 74 69 6e 67 73 } //01 00  AutoSaveSettings
		$a_01_6 = {4b 65 79 50 72 65 73 73 45 76 65 6e 74 41 72 67 73 } //01 00  KeyPressEventArgs
		$a_01_7 = {61 64 64 5f 4b 65 79 50 72 65 73 73 } //01 00  add_KeyPress
		$a_01_8 = {63 00 6f 00 6e 00 66 00 69 00 67 00 5c 00 6e 00 61 00 6d 00 65 00 2d 00 6c 00 69 00 73 00 74 00 2e 00 78 00 6d 00 6c 00 } //01 00  config\name-list.xml
		$a_01_9 = {63 00 6f 00 6e 00 66 00 69 00 67 00 5c 00 6a 00 6f 00 62 00 2d 00 6c 00 69 00 73 00 74 00 2e 00 78 00 6d 00 6c 00 } //00 00  config\job-list.xml
	condition:
		any of ($a_*)

}


private rule win_remcos_rat_unpacked
 {
	meta:
		author = "Matthew @ Embee_Research"
		created = "2023/08/27"
		description = "Detects strings present in remcos rat Samples."
		sha_256 = "ec901217558e77f2f449031a6a1190b1e99b30fa1bb8d8dabc3a99bc69833784"

	strings:
		$r0 = " ______                              " ascii
		$r1 = "(_____ \\                             " ascii
		$r2 = " _____) )_____ ____   ____ ___   ___ " ascii
		$r3 = "|  __  /| ___ |    \\ / ___) _ \\ /___)" ascii
		$r4 = "| |  \\ \\| ____| | | ( (__| |_| |___ |" ascii
		$r5 = "|_|   |_|_____)_|_|_|\\____)___/(___/ " ascii

		$s1 = "Watchdog module activated" ascii
		$s2 = "Remcos restarted by watchdog!" ascii
		$s3 = " BreakingSecurity.net" ascii

	condition:
		//uint16(0) == 0x5a4d
		//and
		(
			(all of ($r*)) or (all of ($s*))
		)




}

private rule Remcos2 {
          meta:
            description = "detect Remcos in memory"
            author = "JPCERT/CC Incident Response Group"
            rule_usage = "memory scan"
            hash1 = "7d5efb7e8b8947e5fe1fa12843a2faa0ebdfd7137582e5925a0b9c6a9350b0a5"

          strings:
            $remcos = "Remcos" ascii fullword
            $url = "Breaking-Security.Net" ascii fullword
            $resource = "SETTINGS" wide fullword
          condition:  all of them
}

rule win_remcos : rat
{
    meta:
        author = "CERT Polska"
    strings:
        $convenient1 = " * Breaking-Security.Net"
        $convenient2 = " * REMCOS v"
        $convenient3 = "SETTINGS"
        $convenient4 = "Remcos_Mutex_Inj"
        $convenient5 = "Online Keylogger Started"
        $convenient6 = "Uploading file to C&C"
        $convenient7 = "Remcos Agent initialized"
    condition:
        3 of ($convenient*)
}

private rule win_remcos_auto2
 {
    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2019-07-05"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator 0.2a"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.remcos"
        malpedia_version = "20190620"
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"
    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using yara-signator.
     * The code and documentation / approach is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */
    strings:
        $sequence_0 = { 51 50 8bce e8???????? 8b4608 ff7510 2b4508 }
            // n = 7, score = 1100
            //   51                   | push                ecx
            //   50                   | push                eax
            //   8bce                 | mov                 ecx, esi
            //   e8????????           |
            //   8b4608               | mov                 eax, dword ptr [esi + 8]
            //   ff7510               | push                dword ptr [ebp + 0x10]
            //   2b4508               | sub                 eax, dword ptr [ebp + 8]
        $sequence_1 = { ff35???????? ff15???????? eb?? 6a09 ff35???????? ff15???????? ff35???????? }
            // n = 7, score = 1100
            //   ff35????????         |
            //   ff15????????         |
            //   eb??                 |
            //   6a09                 | push                9
            //   ff35????????         |
            //   ff15????????         |
            //   ff35????????         |
        $sequence_2 = { ff15???????? 57 57 57 8bd8 57 6a02 }
            // n = 7, score = 1100
            //   ff15????????         |
            //   57                   | push                edi
            //   57                   | push                edi
            //   57                   | push                edi
            //   8bd8                 | mov                 ebx, eax
            //   57                   | push                edi
            //   6a02                 | push                2
        $sequence_3 = { ff7114 e8???????? 5d c3 55 8bec }
            // n = 6, score = 1100
            //   ff7114               | push                dword ptr [ecx + 0x14]
            //   e8????????           |
            //   5d                   | pop                 ebp
            //   c3                   | ret
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
        $sequence_4 = { 75?? 6a01 58 5d c3 8b4028 6a00 }
            // n = 7, score = 1100
            //   75??                 |
            //   6a01                 | push                1
            //   58                   | pop                 eax
            //   5d                   | pop                 ebp
            //   c3                   | ret
            //   8b4028               | mov                 eax, dword ptr [eax + 0x28]
            //   6a00                 | push                0
        $sequence_5 = { 8d45f0 50 ff15???????? 8d4df0 ff15???????? 8b4508 5e }
            // n = 7, score = 1100
            //   8d45f0               | lea                 eax, [ebp - 0x10]
            //   50                   | push                eax
            //   ff15????????         |
            //   8d4df0               | lea                 ecx, [ebp - 0x10]
            //   ff15????????         |
            //   8b4508               | mov                 eax, dword ptr [ebp + 8]
            //   5e                   | pop                 esi
        $sequence_6 = { 50 e8???????? 834608f4 8bc7 5f 5e 5d }
            // n = 7, score = 1100
            //   50                   | push                eax
            //   e8????????           |
            //   834608f4             | add                 dword ptr [esi + 8], -0xc
            //   8bc7                 | mov                 eax, edi
            //   5f                   | pop                 edi
            //   5e                   | pop                 esi
            //   5d                   | pop                 ebp
        $sequence_7 = { 6a00 ff7508 ffd6 50 ff15???????? 50 }
            // n = 6, score = 1100
            //   6a00                 | push                0
            //   ff7508               | push                dword ptr [ebp + 8]
            //   ffd6                 | call                esi
            //   50                   | push                eax
            //   ff15????????         |
            //   50                   | push                eax
        $sequence_8 = { c3 ff7510 ff750c ff15???????? f7d8 1ac0 fec0 }
            // n = 7, score = 1100
            //   c3                   | ret
            //   ff7510               | push                dword ptr [ebp + 0x10]
            //   ff750c               | push                dword ptr [ebp + 0xc]
            //   ff15????????         |
            //   f7d8                 | neg                 eax
            //   1ac0                 | sbb                 al, al
            //   fec0                 | inc                 al
        $sequence_9 = { e9???????? 55 8bec 51 56 8bf1 8d45ff }
            // n = 7, score = 1100
            //   e9????????           |
            //   55                   | push                ebp
            //   8bec                 | mov                 ebp, esp
            //   51                   | push                ecx
            //   56                   | push                esi
            //   8bf1                 | mov                 esi, ecx
            //   8d45ff               | lea                 eax, [ebp - 1]
    condition:
        7 of them
}

rule fsRemcos {
    meta:
        description = "FsYARA - Malware Trends"
        vetted_family = "remcos"

    condition:
        win_remcos_auto or win_remcos_w0 or Remcos or Windows_Trojan_Remcos_b296e965 or Windows_Trojan_Remcos_7591e9f1 or malware_Remcos_strings or MAL_Remcos_strings or PWS_BAT_Remcos_AA_MTB or win_remcos_rat_unpacked or Remcos2 or win_remcos or win_remcos_auto2
}

